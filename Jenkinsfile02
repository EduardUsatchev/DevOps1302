pipeline {
    agent any

    // Disable the default checkout so we can control it ourselves.
    options {
        skipDefaultCheckout(true)
    }

    // Define build parameters for user input.
    parameters {
        string(name: 'DISK_NAME', defaultValue: 'disk1', description: 'Name of the disk')
        string(name: 'MACHINE_NAME', defaultValue: 'machine1', description: 'Name of the machine')
        string(name: 'TARGET_GB', defaultValue: '100', description: 'Target size in GB')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Force checkout of the main branch.
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'refs/heads/main']],
                        userRemoteConfigs: [[url: 'https://github.com/EduardUsatchev/DevOps1302.git']]
                    ])
                    sh 'git checkout main'
                }
            }
        }
        stage('Determine Branch') {
            steps {
                script {
                    def branch = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    echo "Current branch: ${branch}"
                    env.BRANCH_NAME = branch
                }
            }
        }
        stage('Run Script') {
            environment {
                DISK_NAME   = "${params.DISK_NAME}"
                MACHINE_NAME = "${params.MACHINE_NAME}"
                TARGET_GB   = "${params.TARGET_GB}"
            }
            steps {
                script {
                    if (env.BRANCH_NAME == 'main') {
                        echo "Running resizedisk.py on main branch..."
                        // Use python3 instead of python
                        sh 'python3 resizedisk.py'
                    } else if (env.BRANCH_NAME?.startsWith("feature")) {
                        echo "Running resizedisk.py on a feature branch..."
                        sh 'python3 resizedisk.py'
                        error("Intentional failure for feature branch")
                    } else {
                        echo "Branch ${env.BRANCH_NAME} does not trigger any specific action."
                    }
                }
            }
        }
    }
}
